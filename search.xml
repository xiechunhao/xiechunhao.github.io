<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JS 递归的深入理解]]></title>
    <url>%2F2019%2F03%2F04%2F%E9%80%92%E5%BD%92%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[1: 递归 : 在函数内调用函数自己自己调用自己结束的条件了解函数在调用的时候才会占用内存, 不调用不会占内存没有递归结束条件的递归就是死递归 会出现堆溢出.2: 递归的优缺点:优点代码简洁在树的前序，中序，后序遍历算法中，递归的实现明显要比循环简单得多。缺点递归由于是函数调用自身，而函数调用是有时间和空间的消耗的：每一次函数调用，都需要在内存栈中分配空间以保存参数、返回地址以及临时变量，而往栈中压入数据和弹出数据都需要时间。-&gt;效率递归中很多计算都是重复的，由于其本质是把一个问题分解成两个或者多个小问题，多个小问题存在相互重叠的部分，则存在重复计算，如fibonacci斐波那契数列的递归实现。-&gt; 效率调用栈可能会溢出，其实每一次函数调用会在内存栈中分配空间，而每个进程的栈的容量是有限的，当调用的层次太多时，就会超出栈的容量，从而导致栈溢出。-&gt;性能3: 实例:3.1: 递归实现累计求和:12345678function getSum(n) &#123; if(n == 1)&#123; return 1; &#125;else&#123; return n + getSum(n-1); &#125; &#125;console.log(getSum(10)); //553.2: 递归实现阶乘:12345678function getChen(n) &#123; if(n == 1)&#123; return 1; &#125;else&#123; return n * getChen(n-1); &#125;&#125;console.log(getChen(5)); //120 5*4*3*2*13.3: 斐波那契求第N位数的值:出现重复计算: 内存消耗12345678 function feiBo(n) &#123; if(n == 1 || n == 2)&#123; return 1; &#125;else &#123; return feiBo(n-2) + feiBo(n-1); &#125; &#125;console.log(feiBo(10));3.4: 递归常用在遍历DOM树下面的所有元素12345678910111213141516//需求：获取id为father元素的所有后代元素//dom中有没有直接的api可以获取呢？ 没有，只能自己封装函数实现/*思路1.写一个函数，遍历这个元素的childred子元素，获取它的子元素2.让它的每一个子元素继续调用这个函数，遍历子元素的子元素，形成递归调用 */var father = document.getElementById('father');var list = [];function houDai(ele) &#123; for (var i = 0; i &lt; ele.children.length; i++) &#123; list.push(ele.children[i]); houDai(ele.children[i]); &#125;&#125;houDai(father);console.log(list);面试题阶乘，求res值?1var res = (function (n) &#123;return n == 1 ? 1 : n * arguments.callee(n-1)&#125;)(5);解析: 就是递归阶乘. arguments.callee()是获取匿名函数的函数名.因为是匿名函数只能通过这样才能获取实现递归��归]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用的接口API]]></title>
    <url>%2F2019%2F03%2F04%2F%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8E%A5%E5%8F%A3API%2F</url>
    <content type="text"><![CDATA[1: 网易云接口文档 API1https://binaryify.github.io/NeteaseCloudMusicApi/#/]]></content>
      <categories>
        <category>第三方接口</category>
      </categories>
      <tags>
        <tag>API接口</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[npm 介绍及常用命令]]></title>
    <url>%2F2019%2F03%2F04%2Fnpm%20%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[npm 是开发者查找包（package）、设置参数以及管理 npm 使用体验的主要途径，只要电脑安装了 node 就 安装了 npm 包管理工具1: npm 官网地址1https://www.npmjs.com/2: npm常用命令123456789npm install --global npm // 自己升级自己npm init // 项目初始化npm init -y // 可以直接跳过向导，快速生成npm install // 一次性把dependencies选项中的依赖项全部安装npm install 包名 //下载包名npm install --save 包名 //下载并保存依赖项，（package.json文件中的dependenice选项）npm uninstall 包名 //只删除，如果有依赖选会依然保存npm uninstall --save 包名 //删除的同时会把依赖的信息也去除npm help //查看使用帮助3: 安装慢或者被墙问题解决办法npm存储包文件的服务器在国外，有时候会被墙，速度很慢，所以我们需要解决这个问题http://npm.taobao.org/：淘宝的开发团队吧npm在国内做了一个备份，每10分钟会被备份一次所以我们安装淘宝的cnpm1npm install --global npm接下来你安装包的时候把之前的npm替换成cnpm既可：举列如下12345//这个是走国外的服务器，速度比较慢npm install jquery//使用cnpm 就是走淘宝服务器，速度比较快。cnpm install jquery如果不想安装cnpm又想使用淘宝的服务器来下载：123npm config set registry=https://registry.npm.taobao.org//查看npm配置文件npm config list]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快递单号接口API]]></title>
    <url>%2F2019%2F03%2F04%2F%E5%BF%AB%E9%80%92%E5%8D%95%E5%8F%B7%E6%8E%A5%E5%8F%A3API%2F</url>
    <content type="text"><![CDATA[1: 应用场景：物流信息查询2: 本接口采用的是聚合数据接口1https://www.juhe.cn/docs/api/id/433: 注册账号申请快递单号接口：获取申请的key4: 接口参数查看（主要是这三个需要传到服务端）5: Demo 代码12345678910111213141516171819&lt;!-- Jquery保证在1.12及以上 --&gt;&lt;script src="./jquery-1.12.4.js"&gt;&lt;/script&gt;&lt;script&gt; var $key = "870967b6f718e99ceda764f1829c1763"; //申请的商户ID var $kdNumber = "3383748328872"; //快递单号 var $com = "sto"; //快递物流公司简称 如：STO申通 SF顺风等 $.get(&#123; url:'http://v.juhe.cn/exp/index', data:&#123; key : $key, com : $com, no : $kdNumber &#125;, dataType:"jsonp", success:function(data)&#123; console.log(data); &#125; &#125;);&lt;/script&gt;使用JQuery的Ajax访问（经测试直接访问获取不到数据，因为服务端没有主动设置开放CROS资源共享）浏览器会默认同源策略，所以访问失败。需要设 dataType = “jsonp” 跨域访问。返回成果的物流信息6: 查看聚合数据支持的哪些快递公司的查询1https://www.juhe.cn/box/index/id/43]]></content>
      <categories>
        <category>第三方接口</category>
      </categories>
      <tags>
        <tag>API接口</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS 闭包的深入理解]]></title>
    <url>%2F2019%2F03%2F02%2F%E9%97%AD%E5%8C%85%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[1: JS中什么是闭包 ？就是函数 （闭包是一个可以获取其他函数内部变量的函数）2: 闭包作用延长生命周期在函数外部要想访问或者修改数据,只能通过函数的内部的方法设置安全措施,校验之内的操作,可以保证系统的安全性和稳定性3: 闭包语法函数内部声明一个闭包函数在闭包函数中返回想要访问的局部变量返回闭包函数4: 闭包本质：函数内部与函数外部连接起来的一座桥梁5: 闭包的原理上级作用域无法访问下级的作用域6: 闭包要解决的问题闭包内的数据不允许外界访问要解决的问题就是间接的访问该数据7: 闭包的实际应用场景12345678910111213141516171819202122/*闭包实际开发应用场景 -----沙箱模式 ： 一种独立的内存空间，通常是匿名函数自调用 a.提供不同的作用域---避免全局变量污染 b.模块化开发----不同的功能对应不同的作用域 */(function ( w ) &#123; var p = &#123; name:&apos;张三&apos;, sayHi:function ( ) &#123; console.log ( &quot;今天学到好多东西&quot; ); &#125; &#125;; var num = 10; //沙箱模式中所有的变量都是局部的，如何可以在外部全局变量中访问？ //将需要暴露外部的api作为window的属性 /*这里为什么不直接使用window而使用形参来接收呢？ 1.沙箱内部不能直接访问外部变量，会破坏封装性 2.以后的开发中为了减少js文件的大小，会使用专业的压缩工具来压缩,为了避免压缩工具压缩代码导致错误， 通常不直接使用window */ w.p = p;&#125;)(window);console.log ( p );//window.person8: 简单的闭包实例获取或者修改数据获取多个数据和修改多个数据9: 闭包经典面试题9.1: 求 this 的指向1234567891011121314// 返回: Window Name，调用person.getName() 返回值是一个匿名函数，此时在全局作用域中调用匿名函数，此时this指向windowvar name = 'Window Name';var person = &#123; name:'Object Name', getName:function ( ) &#123; return function ( ) &#123; return this.name; &#125; &#125;&#125;;// var fn = person.getName();// fn();console.log ( person.getName () () );//Window Name12345678910111213// 调用person.getName(),在getName方法中this指向person。此时用一个句变量that存储this（person），返回一个匿名函数，函数中that指向personvar name = 'Window Name';var person = &#123; name:'Object Name', getName:function ( ) &#123; var that = this; return function ( ) &#123; return that.name; &#125; &#125;&#125;;console.log ( person.getName () () );//Object Name9.2: 使用闭包来计算数组递归:(高性能)12345678910111213function feiBo() &#123; var arr = [1,1,0]; function closoure(n) &#123; for (var i = 2; i &lt; n; i++) &#123; arr[2] = arr[0] + arr[1]; arr[0] = arr[1]; arr[1] = arr[2]; &#125; return arr[2]; &#125; return closoure;&#125;console.log(feiBo()(10));]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo使用（二） 配置 pure 主题样式]]></title>
    <url>%2F2017%2F05%2F27%2Fhexo%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89%20%E9%85%8D%E7%BD%AE%20pure%20%E4%B8%BB%E9%A2%98%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[配置 hexo pure 主题样式详解（后续补充更多样式）1: hexo 主题使用的是：hexo-theme-pure1.1: 克隆主题并剪切到 \hexo\themes 文件夹下1git clone git@github.com:cofess/hexo-theme-pure.git1.2: 配置 使用 hexo-theme-pure 主题，在站点配置文件_config.yml中修改以下文件1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hexo-theme-pure2: 配置hexo 的 pure 主题注意点2.1: 编辑文件全程使用 sublime 编辑，不要用记事本打开，不会出现乱码的情况，相信搭建都知道原因2.2: 编辑文件基本都是两个文件（注意下面配置说明配置哪个文件，不要错了）配置站点文件 _config.yml配置主题文件 _config.yml3: 解决中文乱码问题在站点配置文件_config.yml中添加1language: zh-CN4: 文章设置属性（Typora 编辑 md 文件）打开需要编辑的文章12345678---title: 文章标题date: 2017-05-27 13:47:40 // 设置文件发布时间（默认是当前时间）categories: // 设置文章分类- 分类名称tags: // 设置文章标签- 标签名称toc: true //是否启用文字目录5: 分类 标签 项目 书单 友链 关于设置（C:\hexo\source）12345678910111213// 使每个目录都有自己的功能title: 分类 // 标题 date: 2019-02-28 23:56:22 // 时间layout: categories // 输出类型type: categories // 类别// 目录结构分类：categories标签：tags项目：repository书单：books友链：links关于：about6: 友链的编辑（C:\hexo\source_data\links.yml）123456789// links创造狮: link: http://chuangzaoshi.com/ avatar: /images/favatar/chuangzaoshi-logo.png desc: 为创意工作者而设计腾讯设计导航: link: http://idesign.qq.com/ avatar: /images/favatar/idesign-logo.png desc: 网罗全网高逼格的设计站点7: 搜索功能7.1: 安装1npm i hexo-generator-json-content --save7.2: 主题设置123search: insight: true # you need to install `hexo-generator-json-content` before using Insight Search baidu: true # you need to disable other search engines to use Baidu search8: 文字字数，阅读时长8.1: 安装1$ npm install hexo-wordcount --save8.2: 主题设置12345# wordcountpostCount: enable: true wordcount: true # 文章字数统计 min2read: true # 阅读时长预计9: 评论功能12参考：https://blog.csdn.net/blue_zy/article/details/79071414参考：https://notes.doublemine.me/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud10: 主题背景特效背景动画 基于canvas，在\themes\pure\layout\layout.ejs的中面添加1&lt;script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt;11: 阅读次数统计本来想用leancloud来统计，因为不蒜子不能管理相关博文的阅读量，但是配置完leancloud会报错~..~只能选用不蒜子，在主题配置文件 中把busuanzi设置为true即可：123pv: busuanzi: enable: true # 不蒜子统计12: hexo-adminGithub：https://github.com/jaredly/hexo-admin简介：可以直接在网页端创建、编辑markdown文章内容，并将内容发布到_posts里。最方便的是可以很方便的给文章加标题、分类、打标签。12.1: 安装这个插件需要升级npm，先升级1npm install -g npm12.2: 然后安装1npm install --save hexo-admin12.3: 配置：在站点配置文件 _config.yml中添加1234admin: username: myfavoritename password_hash: be121740bf988b2225a313fa1f107ca1 secret: a secret something这个配置可以直接在admin Settings &gt; Setup authentification 页面中输入数据获取，secret是用于产生cookie值的。13: hexo-wordcount简介：为文章添加文章字数统计、文章预计阅读时间13.1: 安装：1npm install hexo-wordcount --save13.2: 配置：在主题配置文件 中设置为true：12345# wordcountpostCount: enable: true wordcount: true # 文章字数统计 min2read: true # 阅读时长预计14: hexo-neatGithub：https://github.com/rozbo/hexo-neat简介：自动压缩html、css、js代码14.1: 安装：1npm install hexo-neat --save14.2: 配置：在站点配置文件_config.yml中添加123456789101112131415neat_enable: trueneat_html: enable: ture exclude:neat_css: enable: true exclude: - '*.min.css'neat_js: enable: true mangle: true output: compress: exclude: - '*.min.js'15: 单击页面出现小爱心找到主题下面 layout.ejs 文件夹： themes\hexo-theme-pure\layout\layout.ejs 最下面添加以下代码1&lt;script type="text/javascript" src="//cdn.jsdelivr.net/gh/ygbhf/clicklove/clicklove.js"&gt;&lt;/script&gt;16: 取消目录的编号修改：hexo\themes\hexo-theme-pure\layout_partial\sidebar-toc.ejs 文件夹下的123&lt;%- toc(post.content) %&gt;改为&lt;%- toc(post.content,&#123;list_number: false&#125;) %&gt;]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo使用（一） 搭建博客]]></title>
    <url>%2F2017%2F05%2F27%2Fhexo%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[1: 先要在本地安装 node 和 git 环境，申请域名。2: npm 全局安装 hexo1npm install -g hexo3: 创建一个空目录：如我是 hexo, 再初始化 hexo1hexo init4: 预览上传博客12hexo server --debug// 打开 localhost:4000 访问预览如果有恭喜你成功了。5: 上传到github5.1: 在站点配置文件_config.yml中添加以下代码，仓库地址改为你的github仓库地址，用来连接你自己的 github 地址1234deploy: type: git repository: git@github.com:xiechunhao/xiechunhao.github.io.git branch: master5.1: 提交1234hexo generate // 或者简写 hexo ghexo deploy // 或者简写 hexo dhexo clean // 清空缓存// 设置 github 博客项目的 setting 的 GitHub Pages 的 Custom domain 为自己的域名即可6: github 创建一个博客的仓库，配置gitPage6.1: 申请一个自己的域名，阿里云可以去申请（把 xiechunhao.github.io 博客地址映射到 域名上）6.2: 打开仓库的 setting 配置 GitHub Pages 的 Custom domain 域名为你自己申请的域名, 如我的是：然后 通过域名就可以访问到你自己的博客网站了，但是样式比较丑，我们可以去下载好看的主题并配置即可。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
