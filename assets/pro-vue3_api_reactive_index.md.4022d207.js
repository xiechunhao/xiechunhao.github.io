import{_ as s,o as a,c as e,O as l}from"./chunks/framework.3a9101bc.js";const C=JSON.parse('{"title":"组合式API - reactive和ref","description":"","frontmatter":{},"headers":[],"relativePath":"pro-vue3/api/reactive/index.md","filePath":"pro-vue3/api/reactive/index.md","lastUpdated":1688802289000}'),o={name:"pro-vue3/api/reactive/index.md"},n=l(`<h1 id="组合式api-reactive和ref" tabindex="-1">组合式API - reactive和ref <a class="header-anchor" href="#组合式api-reactive和ref" aria-label="Permalink to &quot;组合式API - reactive和ref&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>reactive和ref</p></div><h2 id="_1-reactive-的使用" tabindex="-1">1. reactive 的使用 <a class="header-anchor" href="#_1-reactive-的使用" aria-label="Permalink to &quot;1. reactive 的使用&quot;">​</a></h2><ol><li><p>作用：接受<code>对象类型数据的参数</code>传入并返回一个<code>响应式的对象</code></p></li><li><p>使用：</p><ul><li>2.1 从 vue 包中导入 <code>reactive</code> 函数</li><li>2.2 在 <code>&lt;script setup&gt;</code> 中执行 <code>reactive</code> 函数并传入<code>类型为对象</code>的初始值，并使用变量接收返回值</li></ul></li></ol><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reactive</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="_2-ref-的使用" tabindex="-1">2. ref 的使用 <a class="header-anchor" href="#_2-ref-的使用" aria-label="Permalink to &quot;2. ref 的使用&quot;">​</a></h2><ol><li><p>作用：接受<code>简单类型或者对象类型的数据</code>传入并返回一个<code>响应式的对象</code></p></li><li><p>使用：</p><ul><li>2.1 从 vue 包中导入 <code>ref</code> 函数</li><li>2.2 在 <code>&lt;script setup&gt;</code> 中执行 <code>ref</code> 函数并传入初始值，使用<code>变量接收</code> ref 函数的返回值</li></ul></li></ol><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="_3-reactive和ref函数的共同作用、区别" tabindex="-1">3. reactive和ref函数的共同作用、区别 <a class="header-anchor" href="#_3-reactive和ref函数的共同作用、区别" aria-label="Permalink to &quot;3. reactive和ref函数的共同作用、区别&quot;">​</a></h2><ol><li>作用：用函数调用的方式生成 <code>响应式数据</code></li><li>区别： <ul><li>2.1 <code> reactive</code> 不能处理简单类型的数据</li><li>2.2 <code>ref参数</code> 类型支持更好但是必须通过 <code>.value访问修改</code></li><li>2.3 <code>ref函数</code> 的内部实现依赖于 <code>reactive函数</code></li></ul></li><li>在实际工作中推荐使用哪个？<code>推荐使用ref函数</code>，更加灵活</li></ol>`,10),p=[n];function t(c,r,i,D,d,y){return a(),e("div",null,p)}const A=s(o,[["render",t]]);export{C as __pageData,A as default};
