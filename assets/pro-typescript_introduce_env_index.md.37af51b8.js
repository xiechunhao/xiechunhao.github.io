import{_ as s,o as e,c as a,O as t}from"./chunks/framework.57763b9a.js";const l="/assets/ts编译.97698f79.jpg",o="/assets/手动编译ts.eea9b307.jpg",n="/assets/pro-ts.716b395b.jpg",D=JSON.parse('{"title":"搭建TS编译环境","description":"","frontmatter":{},"headers":[],"relativePath":"pro-typescript/introduce/env/index.md","filePath":"pro-typescript/introduce/env/index.md","lastUpdated":1688802289000}'),p={name:"pro-typescript/introduce/env/index.md"},c=t('<h1 id="搭建ts编译环境" tabindex="-1">搭建TS编译环境 <a class="header-anchor" href="#搭建ts编译环境" aria-label="Permalink to &quot;搭建TS编译环境&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>TypeScript编写的代码是无法直接在js引擎（浏览器/NodeJs）中运行的，最终还需要经过编译变成js代码才可以正常 运行</p><hr><p><img src="'+l+'" alt="image"></p></div><h2 id="_1-带来的好处" tabindex="-1">1. 带来的好处 <a class="header-anchor" href="#_1-带来的好处" aria-label="Permalink to &quot;1. 带来的好处&quot;">​</a></h2><ol><li>既可以再开发时使用TS编写代码享受类型带来的好处，同时保证实际运行的还是JS代码</li></ol><h2 id="_2-搭建手动编译环境" tabindex="-1">2. 搭建手动编译环境 <a class="header-anchor" href="#_2-搭建手动编译环境" aria-label="Permalink to &quot;2. 搭建手动编译环境&quot;">​</a></h2><ol><li>全局安装 <code>typescript</code> 包（编译引擎）-&gt; 注册 <code>tsc 命令</code></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">g typescript</span></span></code></pre></div><ol start="2"><li>新增 <code>hello.ts</code> 文件， 执行 <code>tsc hello.ts</code> 命令生成 <code>hello.js</code> 文件</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span></span></code></pre></div><ol start="3"><li>执行 <code>node hello.js</code> 运行js文件查看效果</li></ol><p><img src="'+o+'" alt="image"></p><h2 id="_3-搭建工程化下的自动编译环境" tabindex="-1">3. 搭建工程化下的自动编译环境 <a class="header-anchor" href="#_3-搭建工程化下的自动编译环境" aria-label="Permalink to &quot;3. 搭建工程化下的自动编译环境&quot;">​</a></h2><blockquote><p>基于工程化的TS开发模式（webpack / vite），TS的编译环境已经内置了，无需手动安装配置，通过以下命令即可创建一个最基础的自动化的TS编译环境</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm create vite@latest ts</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">pro </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">template vanilla</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">ts</span></span></code></pre></div><ol><li>命令说明 <ul><li>1.1 <code>npm create vite@latest</code> 使用最新版本的vite创建项目</li><li>1.2 <code>ts-pro</code> 项目名称</li><li>1.3 <code>-- --template vanilla-ts</code> 创建项目使用的模板为原生ts模板</li></ul></li></ol><hr><p><img src="'+n+'" alt="image"></p><h2 id="_4-总结" tabindex="-1">4. 总结 <a class="header-anchor" href="#_4-总结" aria-label="Permalink to &quot;4. 总结&quot;">​</a></h2><ol><li>浏览器中不能直接运行TypeScript代码，需要编译为JS代码在运行</li><li>哪个包可以负责把TS编译为JS代码呢？<code>TypeScript</code></li><li>实际工作中我们直接使用工程化工具内置，自动编译。不需要手动搭建编译</li></ol>',19),i=[c];function r(d,h,_,m,u,y){return e(),a("div",null,i)}const A=s(p,[["render",r]]);export{D as __pageData,A as default};
