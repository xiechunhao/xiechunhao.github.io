import{_ as s,o as a,c as n,O as o}from"./chunks/framework.57763b9a.js";const A=JSON.parse('{"title":"类型注解","description":"","frontmatter":{},"headers":[],"relativePath":"pro-typescript/grammar/annotation/index.md","filePath":"pro-typescript/grammar/annotation/index.md","lastUpdated":1688802289000}'),l={name:"pro-typescript/grammar/annotation/index.md"},e=o(`<h1 id="类型注解" tabindex="-1">类型注解 <a class="header-anchor" href="#类型注解" aria-label="Permalink to &quot;类型注解&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>类型注解指的是给变量添加类型约束，使变量只能被赋值为约定好的类型, 同时可以有相关的类型提示</p></div><h2 id="_1-ts-支持的常用类型注解" tabindex="-1">1. TS 支持的常用类型注解 <a class="header-anchor" href="#_1-ts-支持的常用类型注解" aria-label="Permalink to &quot;1. TS 支持的常用类型注解&quot;">​</a></h2><ol><li>JS 已有类型 <ul><li>1.1 简单类型 <code>number</code> <code>string</code> <code>boolean</code> <code>null</code> <code>undefined</code></li><li>1.2 复杂类型 <code>数组</code> <code>函数</code></li></ul></li><li>TS 新增类型 <ul><li>1.1 联合类型、类型别名、接口（interface）、字面量类型、泛型、枚举、void、any 等</li></ul></li></ol><h2 id="_2-简单类型如何进行类型注解" tabindex="-1">2. 简单类型如何进行类型注解 <a class="header-anchor" href="#_2-简单类型如何进行类型注解" aria-label="Permalink to &quot;2. 简单类型如何进行类型注解&quot;">​</a></h2><blockquote><p>简单类型的注解 <code>完全按照 JS的类型（全小写的格式）</code> 来书写即可</p></blockquote><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jack</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> isLoading</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> nullValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> undefined</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined;</span></span></code></pre></div>`,7),p=[e];function t(c,r,i,d,C,D){return a(),n("div",null,p)}const F=s(l,[["render",t]]);export{A as __pageData,F as default};
