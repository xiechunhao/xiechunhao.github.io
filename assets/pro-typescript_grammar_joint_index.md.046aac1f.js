import{_ as s,o as a,c as o,O as n}from"./chunks/framework.57763b9a.js";const A=JSON.parse('{"title":"联合类型和别名类型","description":"","frontmatter":{},"headers":[],"relativePath":"pro-typescript/grammar/joint/index.md","filePath":"pro-typescript/grammar/joint/index.md","lastUpdated":1688802289000}'),l={name:"pro-typescript/grammar/joint/index.md"},p=n(`<h1 id="联合类型和别名类型" tabindex="-1">联合类型和别名类型 <a class="header-anchor" href="#联合类型和别名类型" aria-label="Permalink to &quot;联合类型和别名类型&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>将多个类型合并为一个类型对变量进行注解</p></div><h2 id="_1-联合类型" tabindex="-1">1. 联合类型 <a class="header-anchor" href="#_1-联合类型" aria-label="Permalink to &quot;1. 联合类型&quot;">​</a></h2><ol><li>概念：将 <code>多个类型合并为一个类型</code> 对变量进行注解</li><li>需求：如何注解数组类型可以让数组中既可以存放 string 类型的成员也可以存放 number 类型的成员？ <blockquote><p>说明：<code>string | number</code> 表示 arr1 中的成员既可以是 String 类型也可以是 Number 类型</p></blockquote></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;">)[] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jack</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="_2-类型别名" tabindex="-1">2. 类型别名 <a class="header-anchor" href="#_2-类型别名" aria-label="Permalink to &quot;2. 类型别名&quot;">​</a></h2><ol><li>概念：通过 <code>type</code> 关键字，给写起来复杂的类型起一个其他的名称，用来 <code>简化</code> 和 <code>复用</code> 类型</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ItemType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;">)[]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr3</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ItemType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jack</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr4</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ItemType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lose</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,8),e=[p];function t(r,c,C,y,D,i){return a(),o("div",null,e)}const d=s(l,[["render",t]]);export{A as __pageData,d as default};
