import{_ as s,o as a,c as o,O as l}from"./chunks/framework.3a9101bc.js";const F=JSON.parse('{"title":"object、Object 以及{}","description":"","frontmatter":{},"headers":[],"relativePath":"pro-typescript/grammar/Object.md","filePath":"pro-typescript/grammar/Object.md","lastUpdated":1689921796000}'),n={name:"pro-typescript/grammar/Object.md"},e=l(`<h1 id="object、object-以及" tabindex="-1">object、Object 以及{} <a class="header-anchor" href="#object、object-以及" aria-label="Permalink to &quot;object、Object 以及{}&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">介绍</p><p>ject、Object 以及{} 这三个类型可以容易搞混淆</p></div><h2 id="_1-object" tabindex="-1">1.Object <a class="header-anchor" href="#_1-object" aria-label="Permalink to &quot;1.Object&quot;">​</a></h2><ol><li><p>Object 类型是所有 <code>Object</code> 类的实例的类型。 由以下两个接口来定义：</p><ul><li>• Object 接口定义了 <code>Object.prototype</code> 原型对象上的属性；</li><li>• <code>ObjectConstructor</code> 接口定义了 <code>Object 类的属性</code>， 如上面提到的 Object.create()。</li></ul></li><li><p>这个类型是跟原型链有关的原型链顶层就是 <code>Object</code>，所以值类型和引用类型最终都指向 <code>Object</code>，所以他包含所有类型。</p></li></ol><h2 id="_2-object" tabindex="-1">2. object <a class="header-anchor" href="#_2-object" aria-label="Permalink to &quot;2. object&quot;">​</a></h2><blockquote><p>TypeScript 2.2 引入了被称为 <code>object</code> 类型的新类型，它用于表示<code>非原始类型</code>。在 JavaScript 中以下类型被视为</p></blockquote><ol><li>原始类型：<code>string、boolean、number、bigint、symbol、null 和 undefined。</code></li><li>非原始类型：<code>数组 对象 函数</code></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> o</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//正确</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> o1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//正确</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> o2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//正确</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//错误</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//错误</span></span></code></pre></div><ol start="3"><li>ts中常用于泛型约束</li></ol><h2 id="_3" tabindex="-1">3. {} <a class="header-anchor" href="#_3" aria-label="Permalink to &quot;3. {}&quot;">​</a></h2><ol><li>看起来很别扭的一个东西 你可以把他理解成 new Object 就和我们的第一个 Object 基本一样 包含所有类型</li><li>注意： 字面量模式是不能修改值的</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//正确</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//正确</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a3</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//正确</span></span></code></pre></div><p><a href="https://blog.csdn.net/qq_36380426/article/details/105591840" target="_blank" rel="noreferrer">一文读懂 TS 中 Object, object, {} 类型之间的区别</a></p>`,13),p=[e];function t(c,r,y,C,D,A){return a(),o("div",null,p)}const b=s(n,[["render",t]]);export{F as __pageData,b as default};
