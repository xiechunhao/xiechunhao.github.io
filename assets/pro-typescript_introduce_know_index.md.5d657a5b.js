import{_ as e,o,c as t,O as c}from"./chunks/framework.3a9101bc.js";const S=JSON.parse('{"title":"认识TypeScript","description":"","frontmatter":{},"headers":[],"relativePath":"pro-typescript/introduce/know/index.md","filePath":"pro-typescript/introduce/know/index.md","lastUpdated":1688802289000}'),i={name:"pro-typescript/introduce/know/index.md"},a=c('<h1 id="认识typescript" tabindex="-1">认识TypeScript <a class="header-anchor" href="#认识typescript" aria-label="Permalink to &quot;认识TypeScript&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>TypeScript 是具有类型语法的 JavaScript，是一门强类型的编程语言</p></div><h2 id="_1-优点" tabindex="-1">1. 优点 <a class="header-anchor" href="#_1-优点" aria-label="Permalink to &quot;1. 优点&quot;">​</a></h2><ol><li><code>静态类型检查</code>，提前发现代码错误 <ul><li>1.1 JavaScript <code>运行时</code> 才能发现错误</li><li>1.2 TypeScript <code>写代码时</code> 就能发现错误</li></ul></li><li>良好的代码提示，提升开发效率 <ul><li>2.1 如果使用了TS，vsCode 中可以通过 <code>.</code> 的时候获取到定义的 <code>属性</code> 或者 <code>方法</code> ，减少错误概率</li></ul></li></ol><h2 id="_2-什么时候用" tabindex="-1">2. 什么时候用 <a class="header-anchor" href="#_2-什么时候用" aria-label="Permalink to &quot;2. 什么时候用&quot;">​</a></h2><blockquote><p>以下是来自社区的一些建议：</p></blockquote><ol><li>你做的是一个大型的应用吗？</li><li>是否是团队协作开发模式？</li><li>是否在编写通用的代码库？（Vue3 / ElementPlus...）</li></ol><blockquote><p>结论：TypeScript不是万能的，技术的选型不能脱离具体的业务和应用场景，TS更加适合用来 <code>开发中大型的项目</code> ，或 者是 <code>通用的JS代码库</code> ，再或者是 <code>团队协作开发</code> 的场景</p></blockquote>',8),l=[a];function r(d,p,s,n,_,u){return o(),t("div",null,l)}const m=e(i,[["render",r]]);export{S as __pageData,m as default};
