import{_ as s,o as a,c as n,O as l}from"./chunks/framework.3a9101bc.js";const o="/assets/pinia.216903de.png",d=JSON.parse('{"title":"Pinia详解使用详解","description":"","frontmatter":{},"headers":[],"relativePath":"pro-vue3/pinia/store/index.md","filePath":"pro-vue3/pinia/store/index.md","lastUpdated":1688802289000}'),p={name:"pro-vue3/pinia/store/index.md"},e=l(`<h1 id="pinia详解使用详解" tabindex="-1">Pinia详解使用详解 <a class="header-anchor" href="#pinia详解使用详解" aria-label="Permalink to &quot;Pinia详解使用详解&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>Pinia 是 Vue 的专属的 <code>最新状态管理库</code>，是 Vuex 状态管理工具的替代品</li><li>和 <code>Vuex</code> 一样为 Vue 项目提供共享状态管理工具</li><li>并且支持vue2和vue3，主要是为<code>vue3提供状态管理</code>，支持<code>typescript</code></li><li>Pinia可以创建多个全局仓库，不用像 Vuex 一个仓库嵌套模块，结构复杂。管</li><li>理数据简单，提供数据和修改数据的逻辑即可，不像Vuex需要记忆太多的API</li></ul></div><h2 id="_1-功能作用" tabindex="-1">1. 功能作用 <a class="header-anchor" href="#_1-功能作用" aria-label="Permalink to &quot;1. 功能作用&quot;">​</a></h2><ol><li>提供更加简单的API （去掉了 <code>mutation</code> ）</li><li>提供符合组合式风格的API （和 <code>Vue3 新语法统一</code>）</li><li>去掉了 <code>modules</code> 的概念，每一个 <code>store 都是一个独立的模块</code></li><li>配合 <code>TypeScript</code> 更加友好，提供可靠的类型推断</li></ol><h2 id="_2-手动添加pinia到vue项目" tabindex="-1">2. 手动添加Pinia到Vue项目 <a class="header-anchor" href="#_2-手动添加pinia到vue项目" aria-label="Permalink to &quot;2. 手动添加Pinia到Vue项目&quot;">​</a></h2><blockquote><p>后面在实际开发Vue医疗项目的时候，Pinia可以在项目创建时自动添加，现在我们初次学习，从零开始： 2.1 使用 Vite 创建一个空的TS + Vue3项目</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm create vite@latest vue</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">pinia</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">ts </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">template vue</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">ts</span></span></code></pre></div><p>2.2 按照官方文档安装 <code>pinia</code> 到项目中</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">cnpm i pinia</span></span></code></pre></div><h2 id="_3-pinia基础使用" tabindex="-1">3. Pinia基础使用 <a class="header-anchor" href="#_3-pinia基础使用" aria-label="Permalink to &quot;3. Pinia基础使用&quot;">​</a></h2><ol><li><p>在 <code>src</code> 中定义一个 <code>stores</code> 文件夹，新建 <code>counter.ts</code> 文件</p></li><li><p><code>counter.ts</code> 组件使用 store</p></li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineStore</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pinia</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> useCounterStore </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineStore</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">counter</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 数据（state）</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 修改数据的方法（action）</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">add</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 已对象的形式返回</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">add</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><ol start="3"><li><code>main.js</code> 中引入 <code>pinia</code></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./assets/main.css</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> App </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./App.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createPinia</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pinia</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pinia </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createPinia</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(App)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(pinia)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><ol start="4"><li><code>App.vue</code> 页面中使用</li></ol><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1. 导入 useCounterStore 方法</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useCounterStore</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./stores/counter</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. 执行方法得到counterStore对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> counterStore </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCounterStore</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{counterStore.count}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="_4-getters实现" tabindex="-1">4. getters实现 <a class="header-anchor" href="#_4-getters实现" aria-label="Permalink to &quot;4. getters实现&quot;">​</a></h2><p>Pinia中的 <code>getters</code> 直接使用 <code>computed</code> 函数 进行模拟, 组件中需要使用需要把 getters return出去</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> doubleCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="_5-action异步实现" tabindex="-1">5. action异步实现 <a class="header-anchor" href="#_5-action异步实现" aria-label="Permalink to &quot;5. action异步实现&quot;">​</a></h2><p>方式：<code>异步action</code> 函数的写法和组件中获取异步数据的写法完全一致</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> getList </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">axios</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">request</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">接口数据类型</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_6-storetorefs工具函数" tabindex="-1">6. storeToRefs工具函数 <a class="header-anchor" href="#_6-storetorefs工具函数" aria-label="Permalink to &quot;6. storeToRefs工具函数&quot;">​</a></h2><p>使用<code>storeToRefs</code>函数可以辅助保持数据（state + getter）的响应式解构</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useCounterStore</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./stores/counter</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1. 响应式的数据，如果直接解构在页面使用，试图不再更新</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// const { count, doubleCount } = useCounterStore();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. 使用storeToRefs保持数据响应式</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> doubleCount </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">storeToRefs</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">useCounterStore</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{count}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{doubleCount}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="_7-pinia的调试" tabindex="-1">7. Pinia的调试 <a class="header-anchor" href="#_7-pinia的调试" aria-label="Permalink to &quot;7. Pinia的调试&quot;">​</a></h2><p>Vue官方的 <code>dev-tools</code> 调试工具 对 <code>Pinia</code>直接支持，可以直接进行调试</p><p><img src="`+o+'" alt="image.png"></p><h2 id="_8-总结" tabindex="-1">8. 总结 <a class="header-anchor" href="#_8-总结" aria-label="Permalink to &quot;8. 总结&quot;">​</a></h2><ol><li>通过 <code>const useCounterStore = defineStore(&#39;counter&#39;, () =&gt; {})</code> 创建数据仓库</li><li>vuex 中的 state 在 pinia 中可以引用 <code>ref</code> 和 <code>reactive</code> 创建响应式数据</li><li>vuex 中的 <code>getters</code> 在 pinia 中可以引用 <code>computed</code> 创建计算属性</li><li>vuex 中的 <code>mutations</code> 和 <code>actions</code> 在 pinia 中就是<code>普通函数</code>, 同步异步都可以</li></ol><h2 id="更多面试题-参考文档" tabindex="-1">更多面试题，参考文档: <a class="header-anchor" href="#更多面试题-参考文档" aria-label="Permalink to &quot;更多面试题，参考文档:&quot;">​</a></h2><p><a href="https://pinia.vuejs.org/zh/" target="_blank" rel="noreferrer">Pinia官网</a></p>',32),t=[e];function c(r,i,y,D,F,C){return a(),n("div",null,t)}const u=s(p,[["render",c]]);export{d as __pageData,u as default};
