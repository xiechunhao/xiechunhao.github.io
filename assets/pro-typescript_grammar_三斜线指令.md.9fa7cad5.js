import{_ as e,D as l,o as n,c as p,z as t,a as s,G as o,O as c}from"./chunks/framework.3a9101bc.js";const A=JSON.parse('{"title":"三斜线指令","description":"","frontmatter":{},"headers":[],"relativePath":"pro-typescript/grammar/三斜线指令.md","filePath":"pro-typescript/grammar/三斜线指令.md","lastUpdated":1689921796000}'),r={name:"pro-typescript/grammar/三斜线指令.md"},i=c(`<h1 id="三斜线指令" tabindex="-1">三斜线指令 <a class="header-anchor" href="#三斜线指令" aria-label="Permalink to &quot;三斜线指令&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>概念：三斜线指令是包含单个 <code>XML</code> 标签的单行注释。 注释的内容会做为编译器指令使用。</p></div><h2 id="_1-什么是三斜线" tabindex="-1">1. 什么是三斜线 <a class="header-anchor" href="#_1-什么是三斜线" aria-label="Permalink to &quot;1. 什么是三斜线&quot;">​</a></h2><ol><li><p><code>/// &lt;reference path=&quot;...&quot; /&gt;</code> 指令是三斜线指令中最常见的一种。 它用于声明文件间的 依赖。</p></li><li><p>三斜线指令<code>仅可放在包含它的文件的最顶端</code>。 一个三斜线指令的前面只能出现单行或多行注释，这包括其它的三斜线指令。 如果它们出现在一个语句或声明之后，那么它们会被当做普通的单行注释，并且不具有特殊的涵义。</p></li><li><p>你也可以把它理<code>解成 import</code>，它可以告诉编译器在编译过程中<code>要引入的额外的文件</code>。</p></li></ol><h2 id="_2-使用介绍" tabindex="-1">2. 使用介绍 <a class="header-anchor" href="#_2-使用介绍" aria-label="Permalink to &quot;2. 使用介绍&quot;">​</a></h2><ol><li>a.ts</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol start="2"><li>a.ts</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,9);function y(d,F,D,_,h,m){const a=l("reference");return n(),p("div",null,[i,t("p",null,[s("///"),o(a,{path:"./index2.ts"}),s(" ///"),o(a,{path:"./index3.ts"}),s(" console.log(A);")])])}const u=e(r,[["render",y]]);export{A as __pageData,u as default};
