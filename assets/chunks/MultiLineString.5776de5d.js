import{l as c,L as g,i as u}from"./LineString.e8af5305.js";import{c7 as C,A as d,ca as _,cx as y,cy as m,bz as p,cz as S,cA as A,cB as L}from"./reproj.50e0d4ab.js";class h extends C{constructor(t,s,i){if(super(),this.ends_=[],this.maxDelta_=-1,this.maxDeltaRevision_=-1,Array.isArray(t[0]))this.setCoordinates(t,s);else if(s!==void 0&&i)this.setFlatCoordinates(s,t),this.ends_=i;else{let e=this.getLayout();const a=t,n=[],r=[];for(let o=0,l=a.length;o<l;++o){const f=a[o];o===0&&(e=f.getLayout()),d(n,f.getFlatCoordinates()),r.push(n.length)}this.setFlatCoordinates(e,n),this.ends_=r}}appendLineString(t){this.flatCoordinates?d(this.flatCoordinates,t.getFlatCoordinates().slice()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.ends_.push(this.flatCoordinates.length),this.changed()}clone(){const t=new h(this.flatCoordinates.slice(),this.layout,this.ends_.slice());return t.applyProperties(this),t}closestPointXY(t,s,i,e){return e<_(this.getExtent(),t,s)?e:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(y(this.flatCoordinates,0,this.ends_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),m(this.flatCoordinates,0,this.ends_,this.stride,this.maxDelta_,!1,t,s,i,e))}getCoordinateAtM(t,s,i){return this.layout!="XYM"&&this.layout!="XYZM"||this.flatCoordinates.length===0?null:(s=s!==void 0?s:!1,i=i!==void 0?i:!1,c(this.flatCoordinates,0,this.ends_,this.stride,t,s,i))}getCoordinates(){return p(this.flatCoordinates,0,this.ends_,this.stride)}getEnds(){return this.ends_}getLineString(t){return t<0||this.ends_.length<=t?null:new g(this.flatCoordinates.slice(t===0?0:this.ends_[t-1],this.ends_[t]),this.layout)}getLineStrings(){const t=this.flatCoordinates,s=this.ends_,i=this.layout,e=[];let a=0;for(let n=0,r=s.length;n<r;++n){const o=s[n],l=new g(t.slice(a,o),i);e.push(l),a=o}return e}getFlatMidpoints(){const t=[],s=this.flatCoordinates;let i=0;const e=this.ends_,a=this.stride;for(let n=0,r=e.length;n<r;++n){const o=e[n],l=u(s,i,o,a,.5);d(t,l),i=o}return t}getSimplifiedGeometryInternal(t){const s=[],i=[];return s.length=S(this.flatCoordinates,0,this.ends_,this.stride,t,s,0,i),new h(s,"XY",i)}getType(){return"MultiLineString"}intersectsExtent(t){return A(this.flatCoordinates,0,this.ends_,this.stride,t)}setCoordinates(t,s){this.setLayout(s,t,2),this.flatCoordinates||(this.flatCoordinates=[]);const i=L(this.flatCoordinates,0,t,this.stride,this.ends_);this.flatCoordinates.length=i.length===0?0:i[i.length-1],this.changed()}}const D=h;export{D as M};
