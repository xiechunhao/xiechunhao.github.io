import{_ as e,o as a,c as o,O as l}from"./chunks/framework.57763b9a.js";const F=JSON.parse('{"title":"vue基础面试题","description":"","frontmatter":{},"headers":[],"relativePath":"interview/vue/base/index.md","filePath":"interview/vue/base/index.md","lastUpdated":1688111209000}'),s={name:"interview/vue/base/index.md"},r=l(`<h1 id="vue基础面试题" tabindex="-1">vue基础面试题 <a class="header-anchor" href="#vue基础面试题" aria-label="Permalink to &quot;vue基础面试题&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>总结的一些vue基础面试题目</p></div><h2 id="_1-v-if和v-show-的区别" tabindex="-1">1.v-if和v-show 的区别 <a class="header-anchor" href="#_1-v-if和v-show-的区别" aria-label="Permalink to &quot;1.v-if和v-show 的区别&quot;">​</a></h2><ol><li><code>v-if</code> 是组件的销毁和重建，如果初始化条件为false，则什么都不做，直到变为真，所有切换开销高，运行条件很少改变时适用</li><li><code>v-show</code> 是display:none和block直接的css切换，基于渲染不管初始化条件如果都会渲染，所有初始化渲染开销高，切换频率高适用</li></ol><h2 id="_2-vue常用的几个命令和说明" tabindex="-1">2.vue常用的几个命令和说明 <a class="header-anchor" href="#_2-vue常用的几个命令和说明" aria-label="Permalink to &quot;2.vue常用的几个命令和说明&quot;">​</a></h2><ol><li><code>v-if</code>，<code>v-show </code>控制元素显示隐藏</li><li><code>v-for</code> 循环遍历，设置key值</li><li><code>v-on</code> 事件绑定简写@shaow()</li><li><code>v-model</code> 实现数据的双向绑定</li><li><code>v-bind</code> 实现数据的单向绑定，无法双休绑定（:title=title）</li><li><code>v-cloak</code> 可以解决插值表达式闪烁问题</li><li><code>v-text</code> 默认覆盖元素中原本的内容</li><li><code>v-html</code> 会解析内容里面的html元素，响应到页面</li></ol><h2 id="_3-v-on事件修饰符" tabindex="-1">3.v-on事件修饰符 <a class="header-anchor" href="#_3-v-on事件修饰符" aria-label="Permalink to &quot;3.v-on事件修饰符&quot;">​</a></h2><ol><li><code>.stop</code> 阻止冒泡</li><li><code>.prevent</code> 阻止默认时间行为（a链接跳转，提交按钮提交）</li><li><code>.captrue</code> 添加事件监听器是使用事件捕获触发</li><li><code>.self</code> 指当事件在改变元素本身点击时触发</li><li><code>.once</code> 时间只触发一次</li></ol><h2 id="_4-vue-router-是用来做什么的-有哪些组件" tabindex="-1">4.vue-router 是用来做什么的，有哪些组件 <a class="header-anchor" href="#_4-vue-router-是用来做什么的-有哪些组件" aria-label="Permalink to &quot;4.vue-router 是用来做什么的，有哪些组件&quot;">​</a></h2><ol><li>vue-router路由，用来做页面直接的跳转</li><li>组件 <code>router-view</code>，<code>router-link</code></li></ol><h2 id="_5-vue-router-路由懒加载" tabindex="-1">5.vue-router 路由懒加载 <a class="header-anchor" href="#_5-vue-router-路由懒加载" aria-label="Permalink to &quot;5.vue-router 路由懒加载&quot;">​</a></h2><ol><li>import 异步加载 <code>import error from &#39;@/views/error&#39;</code> //访问页面失败跳转</li></ol><h2 id="_6-vue-router-重定向页面" tabindex="-1">6.vue-router 重定向页面 <a class="header-anchor" href="#_6-vue-router-重定向页面" aria-label="Permalink to &quot;6.vue-router 重定向页面&quot;">​</a></h2><ol><li>路由中配置 <code>redirect</code> 属性</li></ol><h2 id="_7-vue-router-别名" tabindex="-1">7.vue-router 别名 <a class="header-anchor" href="#_7-vue-router-别名" aria-label="Permalink to &quot;7.vue-router 别名&quot;">​</a></h2><ol><li>路由配置 <code>alias</code> 属性</li></ol><h2 id="_8-router和route的区别" tabindex="-1">8.router和route的区别 <a class="header-anchor" href="#_8-router和route的区别" aria-label="Permalink to &quot;8.router和route的区别&quot;">​</a></h2><ol><li><code>router</code> 代表路由实例的对象，包含路由的跳转方法，钩子信息等</li><li><code>route</code> 代表当前路由信息对象，可以获取当前路由的信息参数等</li></ol><h2 id="_9-router-link-跳转" tabindex="-1">9.router-link 跳转 <a class="header-anchor" href="#_9-router-link-跳转" aria-label="Permalink to &quot;9.router-link 跳转&quot;">​</a></h2><ol><li>语法：router-link to=&#39;跳转路径&#39;</li><li>router-link 默认渲染一个a标签，可以通过tag指定属性</li></ol><h2 id="_10-vue-router-有几种导航钩子-有哪些参数" tabindex="-1">10.vue-router 有几种导航钩子，有哪些参数 <a class="header-anchor" href="#_10-vue-router-有几种导航钩子-有哪些参数" aria-label="Permalink to &quot;10.vue-router 有几种导航钩子，有哪些参数&quot;">​</a></h2><p>3种导航钩子，有三个参数：(to, from, next) =&gt; {}，都需要next*()才会继续往下执行</p><ol><li>全局导航守卫 <ul><li>前置导航守卫（beforeEach），判断是否login，判断是否存在token</li><li>后置导航守卫（afterEach），可以做logIn... 取消业务逻辑操作</li><li>beforeEesolve()</li></ul></li><li>路由独享导航守卫 <ul><li>beforeEnter(),</li></ul></li><li>组件级别导航守卫 <ul><li>beforeRouteEnter((to, from, next) =&gt; {next可以传回调，回调里面可以用vm访问实例} ), 内部没有this，因为路由还没confirm</li><li>beforeRouteUpdate((to, from, next) =&gt; {})，可以拿到this</li><li>beforeRouteLeave((to, from, next) =&gt; {}) 组件离开调用</li></ul></li></ol><h2 id="_11-路由跳转的方法" tabindex="-1">11.路由跳转的方法 <a class="header-anchor" href="#_11-路由跳转的方法" aria-label="Permalink to &quot;11.路由跳转的方法&quot;">​</a></h2><ol><li><code>router-link</code> 声明式路由</li><li><code>router-push()</code> 编程式路由</li><li><code>this.$router.push()</code> 函数式跳转</li><li><code>this.$router.replace()</code></li><li><code>this.$router.go()</code> 1或-1</li></ol><h2 id="_12-vue路由传值query和params传参区别" tabindex="-1">12.vue路由传值query和params传参区别 <a class="header-anchor" href="#_12-vue路由传值query和params传参区别" aria-label="Permalink to &quot;12.vue路由传值query和params传参区别&quot;">​</a></h2><ol><li>query 传参配置是path，而params传参配置是name，在params中配置path无效</li><li>query 在路由配置中不需要设置参数，而params必须设置</li><li>query 传递参数会显示在地址栏中</li><li>params 传参会无效，但是query会保存传递过来的值，刷新不变</li></ol><h2 id="_13-active-class-是在哪个组件中的" tabindex="-1">13.active-class 是在哪个组件中的 <a class="header-anchor" href="#_13-active-class-是在哪个组件中的" aria-label="Permalink to &quot;13.active-class 是在哪个组件中的&quot;">​</a></h2><ol><li>vue-router 模块router-link的属性，用来做选中样式切换</li></ol><h2 id="_14-router-addrouters-实现动态路由" tabindex="-1">14.router.addRouters 实现动态路由 <a class="header-anchor" href="#_14-router-addrouters-实现动态路由" aria-label="Permalink to &quot;14.router.addRouters 实现动态路由&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> routerObj</span><span style="color:#89DDFF;">=new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">VueRouter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">routes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">一号</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">二号</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">routerObj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addRoutes</span><span style="color:#A6ACCD;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">三号</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/d</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">四号</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="_15-vue生命周期及场景" tabindex="-1">15.vue生命周期及场景 <a class="header-anchor" href="#_15-vue生命周期及场景" aria-label="Permalink to &quot;15.vue生命周期及场景&quot;">​</a></h2><ol><li><code>beforeCreadted</code> vue实例挂载元素$el和数据对象data都为undefined，dom还未初始化（加载loading事件）</li><li><code>created</code> vue实例挂载数据对象data有了，$el还没有（结束loading，请求数据为mounted做准备）</li><li><code>beforeMount</code> vue实例的$el和data都初始化了，但是还是虚拟的dom，具体的data.filter还未替换</li><li><code>mounted</code> vue实例挂载完成，data.filter成功渲染（配合路由钩子使用，操作dom元素，如echarts，富文本等一些）</li><li><code>beforeUpdate</code> data更新时触发（数据更新到dom树之前）</li><li><code>updated</code> data更新时触发（数据更新到dom树之后，做一些处理，此处可以用watch进行观测）</li><li><code>beforeDestroy</code> 组件销毁时触发</li><li><code>destroyed</code> 组件销毁时触发，vue实例解除了事件监听以及dom绑定，但dom节点依旧存在（组件销毁进行提示，释放资源，关闭定时器等。）</li></ol><h2 id="_16-nexttick的作用" tabindex="-1">16.nextTick的作用 <a class="header-anchor" href="#_16-nexttick的作用" aria-label="Permalink to &quot;16.nextTick的作用&quot;">​</a></h2><ol><li>需要等待dom（渲染完成）更新循环结束之后延迟的回调，在修改数据之后立即使用这个方法，获取更新后的dom</li></ol><h2 id="_17-watch使用" tabindex="-1">17.watch使用 <a class="header-anchor" href="#_17-watch使用" aria-label="Permalink to &quot;17.watch使用&quot;">​</a></h2><ol><li>在最初的时候不会执行，改变监听的时候才会执行，我们同通过设置（handler 、 inmediate:true ）为true就会立即执行handler里面的方法</li><li>deep:true 深度监听（解决对象元素值改变，watch不监听的问题）</li></ol><h2 id="更多面试题-参考文档" tabindex="-1">更多面试题，参考文档: <a class="header-anchor" href="#更多面试题-参考文档" aria-label="Permalink to &quot;更多面试题，参考文档:&quot;">​</a></h2><p><a href="https://juejin.cn/post/6844904031983239181#heading-24" target="_blank" rel="noreferrer">vue高频原理面试题,你能答出几道?</a></p>`,39),n=[r];function t(c,i,p,d,u,h){return a(),o("div",null,n)}const y=e(s,[["render",t]]);export{F as __pageData,y as default};
